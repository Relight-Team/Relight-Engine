import os
import sys

sys.path.append("../")

import RBT_Core as Core
import Platform.RBT_Platform as LC

class ProjectGenerator:
    def __init__():
        pass

    ProjectFileName = ""

    ThirdParties = []

    OBJ_DIR = ""

    OBJ_FILES = ""

    TARGET = ""

    Side_Command = []


    # Adds all default engine defines, also set values when reading Target file
    def DefineGen(self, Array, Plat, EngineDir):

        # == Platform defines == #
        if Plat == "Win64":

            Array.append(LC.Define("WINDOWS=1"))
            Array.append(LC.Define("UNIX=0"))

        elif Plat == "Unix":

            Array.append(LC.Define("WINDOWS=1"))
            Array.append(LC.Define("UNIX=0"))
            Core.ChangeVar("UNIX", "1")

        # == Default Engine Defines == #

        Array.append(LC.Define('ENGINEDIR=\\"' + EngineDir + '\\"'))

    # Remove all duplicates
    def ReturnNoDuplicateArrays(self, Array):
        Ret = []
        i = 0
        while i < len(Array):
            Repeat = False
            j = 0
            while j < len(Ret):
                if Array[i] == Ret[j]:
                    Repeat = True
                j += 1
            if Repeat == False:
                Ret.append(Array[i])
            i += 1
        return Ret


    def Append(self, File, Content):
        f = open(File, "a")
        f.write(Content)
        f.close()

    def PreMake(self, PF):
        p1 = "# == Generated by RelightBuildTool == #"
        p2 = "# !!!     DO NOT EDIT     !!! #"
        Full = p1 + LC.NewLine() + p2 + LC.NewLine() + LC.NewLine()

        self.Append(PF, Full)

    def Make(Target, Engine_Directory, Compiler, OS):
        pass

    def RunBuildFile(FilePath, Rebuild, CompilerDebug):
        return ""

    def IsCompilerSupported(Compiler):
        pass

    def ReturnProjectFileName(self):
        return self.ProjectFileName

    def CreateFolder(self, Dire):
        if not os.path.exists(Dire):
            os.makedirs(Dire)
